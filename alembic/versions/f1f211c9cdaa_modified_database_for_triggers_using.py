"""Modified database for triggers using

Revision ID: f1f211c9cdaa
Revises: 3e7cb8099ffa
Create Date: 2021-04-27 15:24:10.564854

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f1f211c9cdaa'
down_revision = '3e7cb8099ffa'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('city_state_id_state_version_fkey', 'city', type_='foreignkey')
    op.create_foreign_key(None, 'city', 'service', ['state_id'], ['id'], ondelete='CASCADE')
    op.drop_column('city', 'state_version')
    op.drop_constraint('city_alias_city_id_version_fkey', 'city_alias', type_='foreignkey')
    op.create_foreign_key(None, 'city_alias', 'city', ['city_id'], ['id'], ondelete='CASCADE')
    op.drop_column('city_alias', 'version')
    op.drop_constraint('city_to_service_city_id_version_fkey', 'city_to_service', type_='foreignkey')
    op.create_foreign_key(None, 'city_to_service', 'city', ['city_id'], ['id'], ondelete='CASCADE')
    op.drop_column('city_to_service', 'version')
    op.drop_constraint('operation_type_alias_operation_type_id_version_fkey', 'operation_type_alias', type_='foreignkey')
    op.create_foreign_key(None, 'operation_type_alias', 'operation_type', ['operation_type_id'], ['id'], ondelete='CASCADE')
    op.drop_column('operation_type_alias', 'version')
    op.drop_constraint('operation_type_to_service_operation_type_id_version_fkey', 'operation_type_to_service', type_='foreignkey')
    op.create_foreign_key(None, 'operation_type_to_service', 'operation_type', ['operation_type_id'], ['id'], ondelete='CASCADE')
    op.drop_column('operation_type_to_service', 'version')
    op.create_unique_constraint(None, 'realty_details', ['original_url'])
    op.drop_constraint('realty_type_alias_realty_type_id_version_fkey', 'realty_type_alias', type_='foreignkey')
    op.create_foreign_key(None, 'realty_type_alias', 'realty_type', ['realty_type_id'], ['id'], ondelete='CASCADE')
    op.drop_column('realty_type_alias', 'version')
    op.drop_constraint('realty_type_to_service_realty_type_id_version_fkey', 'realty_type_to_service', type_='foreignkey')
    op.create_foreign_key(None, 'realty_type_to_service', 'realty_type', ['realty_type_id'], ['id'], ondelete='CASCADE')
    op.drop_column('realty_type_to_service', 'version')
    op.drop_constraint('state_alias_state_id_version_fkey', 'state_alias', type_='foreignkey')
    op.create_foreign_key(None, 'state_alias', 'state', ['state_id'], ['id'], ondelete='CASCADE')
    op.drop_column('state_alias', 'version')
    op.drop_constraint('state_to_service_state_id_version_fkey', 'state_to_service', type_='foreignkey')
    op.create_foreign_key(None, 'state_to_service', 'state', ['state_id'], ['id'], ondelete='CASCADE')
    op.drop_column('state_to_service', 'version')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('state_to_service', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'state_to_service', type_='foreignkey')
    op.create_foreign_key('state_to_service_state_id_version_fkey', 'state_to_service', 'state', ['state_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('state_alias', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'state_alias', type_='foreignkey')
    op.create_foreign_key('state_alias_state_id_version_fkey', 'state_alias', 'state', ['state_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('realty_type_to_service', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'realty_type_to_service', type_='foreignkey')
    op.create_foreign_key('realty_type_to_service_realty_type_id_version_fkey', 'realty_type_to_service', 'realty_type', ['realty_type_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('realty_type_alias', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'realty_type_alias', type_='foreignkey')
    op.create_foreign_key('realty_type_alias_realty_type_id_version_fkey', 'realty_type_alias', 'realty_type', ['realty_type_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.drop_constraint(None, 'realty_details', type_='unique')
    op.add_column('operation_type_to_service', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'operation_type_to_service', type_='foreignkey')
    op.create_foreign_key('operation_type_to_service_operation_type_id_version_fkey', 'operation_type_to_service', 'operation_type', ['operation_type_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('operation_type_alias', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'operation_type_alias', type_='foreignkey')
    op.create_foreign_key('operation_type_alias_operation_type_id_version_fkey', 'operation_type_alias', 'operation_type', ['operation_type_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('city_to_service', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'city_to_service', type_='foreignkey')
    op.create_foreign_key('city_to_service_city_id_version_fkey', 'city_to_service', 'city', ['city_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('city_alias', sa.Column('version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'city_alias', type_='foreignkey')
    op.create_foreign_key('city_alias_city_id_version_fkey', 'city_alias', 'city', ['city_id', 'version'], ['self_id', 'version'], ondelete='CASCADE')
    op.add_column('city', sa.Column('state_version', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'city', type_='foreignkey')
    op.create_foreign_key('city_state_id_state_version_fkey', 'city', 'state', ['state_id', 'state_version'], ['self_id', 'version'], ondelete='CASCADE')
    # ### end Alembic commands ###
